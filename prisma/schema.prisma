// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Test {
//   id        Int     @id @default(autoincrement())
//   name      String  @db.VarChar(255)
//   desc      String?
//   number    Int
//   published Boolean
// }

model User {
  id                    String          @id
  username              String          @unique
  avatar                String?
  cover                 String?
  description           String?
  surname               String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  createdAt             DateTime        @default(now())
  post                  Post[]
  likes                 Like[]
  Comment               Comment[]
  followers             Follower[]      @relation("UserFollowers")
  followings            Follower[]      @relation("UserFollowings")
  FollowRequestSend     FollowRequest[] @relation("FollowRequestSend")
  FollowRequestReceived FollowRequest[] @relation("FollowRequestReceive")
  BlockedRequestSend    BlockRequest[]  @relation("BlockRequestSend")
  BlockedRequestReceive BlockRequest[]  @relation("BlockRequestReceived")
  Story                 Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  sender     User     @relation("FollowRequestSend", fields: [senderId], references: [id])
  receiver   User     @relation("FollowRequestReceive", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model BlockRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocker   User     @relation("BlockRequestSend", fields: [blockerId], references: [id])
  blocked   User     @relation("BlockRequestReceived", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
